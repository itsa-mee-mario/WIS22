(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    273106,       5722]
NotebookOptionsPosition[    268475,       5641]
NotebookOutlinePosition[    268879,       5657]
CellTagsIndexPosition[    268836,       5654]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"oscillator", "[", 
    RowBox[{"d_", ",", "w0_", ",", "x_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "w", ",", " ", "phi", ",", " ", "A", ",", " ", "cos", ",", " ", "exp", 
       ",", "y"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"w", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         RowBox[{"w0", "^", "2"}], "-", 
         RowBox[{"d", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"phi", "=", 
       RowBox[{"ArcTan", "[", 
        RowBox[{
         RowBox[{"-", "d"}], "/", "w"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"A", "=", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", 
          RowBox[{"Cos", "[", "phi", "]"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cos", "=", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"w0", "*", "x"}], "+", "phi"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"exp", "=", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "d"}], "*", "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"y", "=", 
       RowBox[{"exp", "*", "2", "*", "A", "*", "cos"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"y", "//", "N"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.850100198684375*^9, 3.8501002022727222`*^9}, 
   3.850100953017064*^9, {3.8501010115607758`*^9, 3.8501010787386007`*^9}, {
   3.850101134289132*^9, 3.850101136640493*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"07b8faac-2071-46ce-bf7a-cd2244d7255d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"oscillator", "[", 
    RowBox[{"2", ",", "20", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.850100966896895*^9, 3.85010098927218*^9}, {
  3.85010108449772*^9, 3.850101116189806*^9}, {3.850101323147739*^9, 
  3.850101325638957*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"74a1432d-7cb6-4fd0-8fb0-e39d41f83398"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
/w==
       "]]},
     Annotation[#, "Charting`Private`Tag$4660#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-0.7304003209557905, 1.0000000002055411`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.850101074651148*^9, 3.850101116701908*^9}, 
   3.850101326401947*^9, 3.850115529543188*^9, 3.8501229379094715`*^9, 
   3.8501235204216127`*^9, {3.8501239219279222`*^9, 3.850123943864182*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"977f1133-cc01-4169-b8cc-6ae87a5e1c27"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.850470107690856*^9, 
  3.850470109200526*^9}},ExpressionUUID->"3a0f4b7d-2ee4-4454-8abb-\
63429e15fa22"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"net", "[", 
    RowBox[{"ninput_", ",", "noutput_", ",", "nhidden_", ",", "nlayers_"}], 
    "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"nhidden", ",", "\[IndentingNewLine]", 
      RowBox[{"FunctionLayer", "[", "Tanh", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"LinearLayer", "[", "nhidden", "]"}], ",", 
          RowBox[{"FunctionLayer", "[", "Tanh", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "nlayers", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "noutput", "]"}], ","}], " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], "]"}]}], 
  "\[IndentingNewLine]", "\n"}]], "Input",
 CellChangeTimes->{{3.8501143258845863`*^9, 3.850114383648986*^9}, {
   3.850114435705647*^9, 3.850114501895039*^9}, {3.85011453599175*^9, 
   3.8501145443389263`*^9}, {3.85011500649546*^9, 3.850115019289928*^9}, {
   3.850115166635606*^9, 3.85011520502601*^9}, 3.8501229598861895`*^9, {
   3.8501231743502235`*^9, 3.8501231783334117`*^9}, 3.8501235232125998`*^9, {
   3.850123570244385*^9, 3.8501235752037277`*^9}, 3.8501236622459087`*^9, {
   3.8504700998078747`*^9, 
   3.850470111416253*^9}},ExpressionUUID->"986378fb-6a80-4850-baa9-\
0a6018269f10"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"oscillator", "[", 
        RowBox[{"2", ",", "20", ",", "x"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "0.5", ",", "0.05"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"traindata", " ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "->", " ", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", " ", "data"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"traindata", " ", "=", " ", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{"traindata", ",", " ", 
    RowBox[{"Length", "[", "traindata", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.850115596365426*^9, 3.850115606195011*^9}, {
   3.850123663946457*^9, 3.850123664931678*^9}, 3.850126663380093*^9, {
   3.850128572458202*^9, 3.850128594996825*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"43cf647b-a1fd-4bd2-924a-2411bb34308d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.35000000000000003`", "\[Rule]", "0.4071661276405342`"}], ",", 
   RowBox[{"0.25`", "\[Rule]", "0.11359510730582656`"}], ",", 
   RowBox[{"0.`", "\[Rule]", "1.`"}], ",", 
   RowBox[{"0.45`", "\[Rule]", 
    RowBox[{"-", "0.35359802227280923`"}]}], ",", 
   RowBox[{"0.1`", "\[Rule]", 
    RowBox[{"-", "0.26589018605833553`"}]}], ",", 
   RowBox[{"0.2`", "\[Rule]", 
    RowBox[{"-", "0.48913597868707465`"}]}], ",", 
   RowBox[{"0.45`", "\[Rule]", 
    RowBox[{"-", "0.35359802227280923`"}]}], ",", 
   RowBox[{"0.4`", "\[Rule]", 
    RowBox[{"-", "0.0206986931353865`"}]}], ",", 
   RowBox[{"0.4`", "\[Rule]", 
    RowBox[{"-", "0.0206986931353865`"}]}], ",", 
   RowBox[{"0.`", "\[Rule]", "1.`"}], ",", 
   RowBox[{"0.05`", "\[Rule]", "0.5654087631745865`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.850115607563723*^9, 3.8501229860982285`*^9, 
  3.8501236041302814`*^9, 3.8501236658305826`*^9, 3.850123949139876*^9, 
  3.8501285959431868`*^9, 3.850376562908657*^9, 3.8503982776765127`*^9, 
  3.850401947973981*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"1685bd06-297f-40c9-a695-7a38a439e45b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"oscillator", "[", 
        RowBox[{"2", ",", "20", ",", "x"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1", ",", "0.1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.850124253778206*^9, 3.8501242582989607`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"f322e0ef-6bb0-43d8-bf0a-8bbed5f812fc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testdata", " ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "->", " ", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", " ", "data"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"testdata", " ", "=", " ", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{"testdata", ",", " ", 
    RowBox[{"Length", "[", "testdata", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.850124264624538*^9, 3.850124270225842*^9}, 
   3.850126665159987*^9, {3.8501286063690987`*^9, 3.850128615389801*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"2555aa67-20aa-43c5-b9d5-d946813644f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.30000000000000004`", "\[Rule]", "0.5115407251517651`"}], ",", 
   RowBox[{"1.`", "\[Rule]", "0.06764551590154892`"}], ",", 
   RowBox[{"0.6000000000000001`", "\[Rule]", "0.23792124488133046`"}], ",", 
   RowBox[{"0.5`", "\[Rule]", 
    RowBox[{"-", "0.3287914073491855`"}]}], ",", 
   RowBox[{"0.`", "\[Rule]", "1.`"}], ",", 
   RowBox[{"0.6000000000000001`", "\[Rule]", "0.23792124488133046`"}], ",", 
   RowBox[{"0.9`", "\[Rule]", "0.09667334394377602`"}], ",", 
   RowBox[{"0.7000000000000001`", "\[Rule]", "0.05827012364236645`"}], ",", 
   RowBox[{"1.`", "\[Rule]", "0.06764551590154892`"}], ",", 
   RowBox[{"1.`", "\[Rule]", "0.06764551590154892`"}], ",", 
   RowBox[{"0.8`", "\[Rule]", 
    RowBox[{"-", "0.19919006536335476`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.850124271169065*^9, 3.850128616159971*^9, 
  3.8503765680894117`*^9, 3.850398282786165*^9, 3.8504019522576027`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"24483ecc-d2cc-4725-972c-dfc92efecf55"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Show", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ListPlot", "[", "data", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"oscillator", "[", 
       RowBox[{"2", ",", "20", ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "\n", "\n"}]], "Input",
 CellChangeTimes->{{3.85011495243806*^9, 3.85011495772088*^9}, {
   3.8501150524392233`*^9, 3.8501151573644753`*^9}, {3.8501152124411087`*^9, 
   3.8501152277339563`*^9}, 3.850115313390976*^9},
 CellLabel->
  "In[120]:=",ExpressionUUID->"88df451c-aac3-4f4a-9c07-ef39c73cc241"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{0., 1.}, {0.05, 0.5654087631745865}, {
      0.1, -0.26589018605833553`}, {
      0.15000000000000002`, -0.7228973850189276}, {
      0.2, -0.48913597868707465`}, {0.25, 0.11359510730582656`}, {
      0.30000000000000004`, 0.5115407251517651}, {0.35000000000000003`, 
      0.4071661276405342}, {0.4, -0.0206986931353865}, {
      0.45, -0.35359802227280923`}, {
      0.5, -0.3287914073491855}}]}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
/w==
        "]]},
      Annotation[#, "Charting`Private`Tag$62523#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.5}, {-0.7228973850189276, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.850115053090115*^9, 3.850115207426594*^9}, 
   3.850115314151787*^9, 3.850115529969798*^9, 3.850123952067555*^9, 
   3.850128618954739*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"ebc5f943-f04a-45e6-8af4-54559b47987c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"firstnet", "=", 
   RowBox[{"net", "[", 
    RowBox[{"11", ",", "1", ",", "10", ",", "1"}], "]"}]}], 
  "\[IndentingNewLine]", "\n"}]], "Input",
 CellChangeTimes->{{3.850115385860921*^9, 3.850115491370696*^9}, {
   3.850115612241243*^9, 3.850115631700385*^9}, {3.850115679649406*^9, 
   3.850115716562786*^9}, 3.850115850823722*^9, {3.8501236240696344`*^9, 
   3.8501236316139345`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"3ed34430-8bc1-45e6-b510-5abca87390a2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{10, 10}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 10}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TagBox[
                    RowBox[{"FunctionLayer", "[", "Tanh", "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "1", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.850380534015417*^9, 3.8503990721351137`*^9, 
  3.850401957321291*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"cf066737-8c25-4c76-a145-ae5eab8e8729"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.850128625322534*^9, 3.8501286257927933`*^9}, 
   3.8501287079075336`*^9},ExpressionUUID->"0bb4ee62-27bc-4917-b0e5-\
7b8acd42e844"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedfirstnet", " ", "=", " ", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"firstnet", ",", "traindata", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<TrainedNet\>\"", ",", " ", "\"\<ResultsObject\>\""}], 
      "}"}], ",", " ", 
     RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "5"}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "testdata"}]}], " ", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8501230818407283`*^9, 3.8501230845973816`*^9}, {
   3.8501236783644896`*^9, 3.8501236864815717`*^9}, {3.8501237211558094`*^9, 
   3.850123733139558*^9}, {3.850124067866967*^9, 3.850124081316354*^9}, {
   3.850124158527128*^9, 3.850124172305745*^9}, {3.850124234366634*^9, 
   3.850124237061849*^9}, {3.85012427746812*^9, 3.850124278191712*^9}, {
   3.8501252664853363`*^9, 3.8501252706210938`*^9}, 3.850125713040745*^9, {
   3.850126350543577*^9, 3.850126353337679*^9}, {3.850126674119206*^9, 
   3.850126684980974*^9}, {3.850126873409698*^9, 3.850126873993029*^9}, {
   3.850127362868657*^9, 3.8501273926035147`*^9}, {3.8501279704834337`*^9, 
   3.8501279763576107`*^9}, {3.850128072468107*^9, 3.850128153721921*^9}, {
   3.850128194968213*^9, 3.850128197622922*^9}, {3.850128546347859*^9, 
   3.8501285494948883`*^9}, {3.85012871164058*^9, 3.850128713246545*^9}, {
   3.850128759039082*^9, 3.850128770125256*^9}, {3.8501300050873404`*^9, 
   3.850130027218638*^9}, 3.850380551537825*^9, {3.8503990596770477`*^9, 
   3.850399059820986*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"b85354af-8491-41a5-872f-a4c66153cbf2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TemplateBox[{
      RowBox[{
        StyleBox[
         TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                StyleBox[
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 CacheGraphics -> False], 
                GridBox[{{
                   StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox["\"real\"", "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
                 Automatic, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridFrameMargins -> {{0, 0}, {0, 0}}, 
              BaselinePosition -> {1, 3}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                StyleBox[
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 CacheGraphics -> False], 
                GridBox[{{
                   
                   DynamicModuleBox[{
                    NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|"1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                    DynamicBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TagBox[
                    RowBox[{"FunctionLayer", "[", "Tanh", "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "1", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                    Initialization :> {NetChain}]}}, BaselinePosition -> 
                 Automatic, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridFrameMargins -> {{0, 0}, {0, 0}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("NetChain[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{
    StyleBox[
     TagBox["NetTrainResultsObject",
      "SummaryHead"], "NonInterpretableSummary"], 
    StyleBox["[", "NonInterpretableSummary"], 
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["summary"], 
                   TextCell["summary"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["batches:"], 
                    TextCell["batches:"]], "5"}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["rounds:"], 
                    TextCell["rounds:"]], "5"}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["time:"], 
                    TextCell["time:"]], 
                   InterpretationBox[
                    Cell["2.3s"], 
                    TextCell["2.3s"]]}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["examples/s:"], 
                    TextCell["examples/s:"]], 
                   TagBox[
                    InterpretationBox[
                    StyleBox["\"24.\"", ShowStringCharacters -> False], 
                    24.0075601989572, AutoDelete -> True], 
                    NumberForm[#, 2]& ]}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["data"], 
                   TextCell["data"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["training examples:"], 
                    TextCell["training examples:"]], "11"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["validation examples:"], 
                    TextCell["validation examples:"]], "11"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["processed examples:"], 
                    TextCell["processed examples:"]], "55"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["skipped examples:"], 
                    TextCell["skipped examples:"]], "0"}, 
                  "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["method"], 
                   TextCell["method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["ADAM"], 
                    TextCell["ADAM"]], 
                   InterpretationBox[
                    Cell["optimizer"], 
                    TextCell["optimizer"]]}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["batch size"], 
                    TextCell["batch size"]], "11"}, "RowWithSeparators"], 
                 InterpretationBox[
                  Cell["GPU"], 
                  TextCell["GPU"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["round"], 
                   TextCell["round"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                   TagBox[
                    InterpretationBox[
                    StyleBox[
                    RowBox[{"\"3.22\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.32177548426923086`, AutoDelete -> True], 
                    ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["validation"], 
                   TextCell["validation"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                   TagBox[
                    InterpretationBox[
                    StyleBox[
                    RowBox[{"\"1.7\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.17013476375194098`, AutoDelete -> True], 
                    ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               ItemBox[GridBox[{
                  {"", 
                   ItemBox["\<\"rounds\"\>",
                    DefaultBaseStyle->"LabeledLabel"]},
                  {
                   RotationBox[
                    ItemBox["\<\"loss\"\>",
                    DefaultBaseStyle->"LabeledLabel"],
                    BoxRotation->1.5708], 
                   GraphicsBox[
                    {AbsoluteThickness[1.25], {
                    {Hue[0.083, 1., 1.], 
                    LineBox[{{1., -0.46900669828471586`}, {
                    2., -0.47492059446284574`}, {3., -0.4807654874892464}, {
                    4., -0.4866048868455848}, {
                    5., -0.49244704740969314`}}]}, 
                    {Hue[0.083, 1., 0.76], AbsolutePointSize[4.125], 
                    PointBox[{{1., -0.46900669828471586`}, {
                    2., -0.47492059446284574`}, {3., -0.4807654874892464}, {
                    4., -0.4866048868455848}, {
                    5., -0.49244704740969314`}}]}}, {
                    {Hue[0.59, 0.7, 0.75], 
                    LineBox[{{0.9866220735785953, -0.7034542907690561}, {
                    1.9899665551839465`, -0.7212273136275285}, {
                    2.9933110367892977`, -0.7378449295327473}, {
                    3.9966555183946486`, -0.7538007447926918}, {
                    5., -0.7692069376333397}}]}, 
                    {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.125], 
                    PointBox[{{0.9866220735785953, -0.7034542907690561}, {
                    1.9899665551839465`, -0.7212273136275285}, {
                    2.9933110367892977`, -0.7378449295327473}, {
                    3.9966555183946486`, -0.7538007447926918}, {
                    5., -0.7692069376333397}}]}}},
                    AspectRatio->Full,
                    Axes->None,
                    Background->GrayLevel[1],
                    
                    BaseStyle->{
                    FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6},
                    Frame->True,
                    FrameStyle->GrayLevel[0.5],
                    FrameTicks->None,
                    GridLines->{{1., 2., 3., 4., 5.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.5228787452803374`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.301029995663981, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.154901959985743, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}, {-1.045757490560675, 
                    GrayLevel[0.8501]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.5228787452803375, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.30102999566398114`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.1549019599857432, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {-0.04575749056067506, 
                    GrayLevel[0.8501]}}},
                    ImagePadding->1,
                    ImageSize->{302, 182.},
                    PlotRange->{{0, 5.5}, {-1.211, -0.08900000000000001}},
                    PlotRangeClipping->True,
                    PlotRangePadding->None,
                    Prolog->{{
                    InsetBox[
                    FormBox["1", TraditionalForm], 
                    Offset[{-2, -2}, {1., -0.08900000000000001}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["2", TraditionalForm], 
                    Offset[{-2, -2}, {2., -0.08900000000000001}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["3", TraditionalForm], 
                    Offset[{-2, -2}, {3., -0.08900000000000001}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["4", TraditionalForm], 
                    Offset[{-2, -2}, {4., -0.08900000000000001}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["5", TraditionalForm], 
                    Offset[{-2, -2}, {5., -0.08900000000000001}], 
                    ImageScaled[{1., 1.}]]}, {
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -1.}], 
                    ImageScaled[{0, 0.}]]}}]}
                 },
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.4]},
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}},
                 GridBoxSpacings->{"Columns" -> {{0.5}}}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"},
              {
               ItemBox[
                StyleBox[
                 RowBox[{
                  GraphicsBox[{},
                   Axes->None,
                   Background->Hue[0.083, 1., 1.],
                   ImagePadding->{{0, 0}, {5, 2}},
                   ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
                  GraphicsBox[{},
                   Axes->None,
                   Background->Hue[0.59, 0.7, 0.75],
                   ImagePadding->{{0, 0}, {5, 2}},
                   ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
                 FontFamily->"Verdana",
                 FontSize->8,
                 FontColor->GrayLevel[0.4]],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> 
           "Nimbus Sans [UKWN]", NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False], 
    StyleBox["]", "NonInterpretableSummary"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.850380660639914*^9, 3.850399121101565*^9, 
  3.850402007756822*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"5d3bade9-706a-4615-9c50-3e76bc5c8271"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8501240901401176`*^9, 
  3.8501240909685*^9}},ExpressionUUID->"6a0a7e6c-d5c9-4bfa-908b-6e95f4794468"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"oscillator", "[", 
      RowBox[{"2", ",", "20", ",", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", " ", 
     RowBox[{"ColorFunction", "\[Rule]", "Hue"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"trainedfirstnet", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", "i", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "1"}], "}"}], ",", " ", 
     RowBox[{"PlotStyle", "->", "Gray"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Graphics", "@", 
    RowBox[{"Line", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.5", ",", " ", 
         RowBox[{"-", "1"}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0.5", ",", " ", "1"}], "}"}]}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.8501264990458193`*^9, 3.850126545346466*^9}, {
  3.850126589217168*^9, 3.8501266457825613`*^9}, {3.850127194133174*^9, 
  3.850127209236458*^9}, {3.850130066892558*^9, 3.8501300689209547`*^9}, {
  3.8501355763626328`*^9, 3.850135591087967*^9}, {3.850135624432242*^9, 
  3.850135681329126*^9}, {3.850135751307757*^9, 3.850135791045705*^9}, {
  3.850135846748851*^9, 3.850135901715816*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"28889f72-4225-48ba-8bf3-c3823dff4e45"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
Z2uh8dNi+B+Ebnz/
     "], {{}, {}, 
      TagBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1: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
         "],
         VertexColors->Automatic]},
       Annotation[#, "Charting`Private`Tag$95617#1"]& ]},
     VertexColors->{
       Hue[1.], 
       Hue[0.9568474148055095], 
       Hue[0.8251586550388389], 
       Hue[0.6483168272731851], 
       Hue[0.4546308631935385], 
       Hue[0.25646554863048954`], 
       Hue[0.11095358223605811`], 
       Hue[0.018459464798481484`], 
       Hue[0.0034118532375415067`], 
       Hue[0.054161446091131216`], 
       Hue[0.16541414507311042`], 
       Hue[0.30146323361889754`], 
       Hue[0.442538780508978], 
       Hue[0.5797338972376637], 
       Hue[0.6739761214737563], 
       Hue[0.7257126324611431], 
       Hue[0.7212001535281476], 
       Hue[0.6720189110141365], 
       Hue[0.5820110654776063], 
       Hue[0.4795174474718758], 
       Hue[0.36805778448474546`], 
       Hue[0.2766147995833438], 
       Hue[0.2198846595368256], 
       Hue[0.19696540164332602`], 
       Hue[0.2123782179434921], 
       Hue[0.2571366578742177], 
       Hue[0.32866361381700854`], 
       Hue[0.4048212234634144], 
       Hue[0.48339662801028904`], 
       Hue[0.5439788865086771], 
       Hue[0.5777724330811937], 
       Hue[0.5857416062250662], 
       Hue[0.5671753013908074], 
       Hue[0.5291594580646249], 
       Hue[0.4738833583448411], 
       Hue[0.41821907885762927`], 
       Hue[0.3635170522650708], 
       Hue[0.3254813871914708], 
       Hue[0.3052075612497624], 
       Hue[0.30418843343490115`], 
       Hue[0.32154375119944983`], 
       Hue[0.355644127170623], 
       Hue[0.39772445268956436`], 
       Hue[0.4377739881817479], 
       Hue[0.47502189149256036`], 
       Hue[0.49892261073207816`], 
       Hue[0.509356775379053], 
       Hue[0.505519156902777], 
       Hue[0.48937515034005935`], 
       Hue[0.4611914815453272], 
       Hue[0.9889930703692982], 
       Hue[0.9004987163427658], 
       Hue[0.7413236132334308], 
       Hue[0.3518775839026026], 
       Hue[0.17748718821241716`], 
       Hue[0.05529131528369258], 
       Hue[0.0014620904109823307`], 
       Hue[0.021561043508635025`], 
       Hue[0.10375573788317688`], 
       Hue[0.23101125275676365`], 
       Hue[0.5146493788171704], 
       Hue[0.6318636103009276], 
       Hue[0.7069041008928099], 
       Hue[0.7301957244370614], 
       Hue[0.7014849801174814], 
       Hue[0.6307649405400417], 
       Hue[0.5319089074440728], 
       Hue[0.4226064942938888], 
       Hue[0.31908649144821705`], 
       Hue[0.24425257442839948`], 
       Hue[0.20320581046313263`], 
       Hue[0.20043009982145532`], 
       Hue[0.2315618035434162], 
       Hue[0.29070988265500086`], 
       Hue[0.4454837392063931], 
       Hue[0.5164068766490385], 
       Hue[0.5639344199279939], 
       Hue[0.5855368070069277], 
       Hue[0.5793750129467076], 
       Hue[0.5502261421669414], 
       Hue[0.5027374667024946], 
       Hue[0.38954330348630617`], 
       Hue[0.34253825378216224`], 
       Hue[0.3130615009130836], 
       Hue[0.3019859637250233], 
       Hue[0.31085702964520034`], 
       Hue[0.33700102944401544`], 
       Hue[0.3761060790622078], 
       Hue[0.4575986817525609], 
       Hue[0.48852315360732335`], 
       Hue[0.5058332405619365], 
       Hue[0.5093492068252795], 
       Hue[0.49878267925349384`], 
       Hue[0.4762886362920881], 
       Hue[0.9972377595811077], 
       Hue[0.9312813792043833], 
       Hue[0.7846301202067723], 
       Hue[0.40260162476804023`], 
       Hue[0.21557384627749385`], 
       Hue[0.08085927825371891], 
       Hue[0.007569863163956414], 
       Hue[0.010586816973188196`], 
       Hue[0.07726276644860525], 
       Hue[0.19742510998202015`], 
       Hue[0.47929435695320716`], 
       Hue[0.6069566574776752], 
       Hue[0.6921630681728711], 
       Hue[0.7296762794420095], 
       Hue[0.7126421529541846], 
       Hue[0.6524753653695168], 
       Hue[0.5573785538890773], 
       Hue[0.450924009666047], 
       Hue[0.34287344904721445`], 
       Hue[0.25948649353177694`], 
       Hue[0.21024913492094016`], 
       Hue[0.19759936924294802`], 
       Hue[0.22110335848322576`], 
       Hue[0.2732639642288768], 
       Hue[0.42538841979366515`], 
       Hue[0.5005092099632417], 
       Hue[0.5546934606039622], 
       Hue[0.5826057157260994], 
       Hue[0.5833233781316565], 
       Hue[0.5592698318036184], 
       Hue[0.5163361864586752], 
       Hue[0.4036228925946139], 
       Hue[0.352576685851435], 
       Hue[0.3187153694229895], 
       Hue[0.30290763041250707`], 
       Hue[0.30699016768718934`], 
       Hue[0.32881698087602107`], 
       Hue[0.3656687593225954], 
       Hue[0.44793855643929603`], 
       Hue[0.48213712583447726`], 
       Hue[0.5027960586675507], 
       Hue[0.5098450832336271], 
       Hue[0.5025105235088245], 
       Hue[0.48313141582289176`], 
       Hue[0.9754518573941597], 
       Hue[0.8649571757036536], 
       Hue[0.30299680272876733`], 
       Hue[0.14252083680229616`], 
       Hue[0.03444544874840477], 
       Hue[0.00010398486508805815`], 
       Hue[0.036155870054588646`], 
       Hue[0.13327129587436498`], 
       Hue[0.5482411025629521], 
       Hue[0.6542592460631192], 
       Hue[0.7181047370131197], 
       Hue[0.7273366107922754], 
       Hue[0.6878850281063505], 
       Hue[0.29693014188074257`], 
       Hue[0.23102257627020567`], 
       Hue[0.1987796069712647], 
       Hue[0.205386566079433], 
       Hue[0.24362121456791286`], 
       Hue[0.4648885332629658], 
       Hue[0.5309404700546411], 
       Hue[0.5716420496218855], 
       Hue[0.5865727257151305], 
       Hue[0.573965129245202], 
       Hue[0.540151160067122], 
       Hue[0.37612875877282037`], 
       Hue[0.3334831328227732], 
       Hue[0.30855199066459466`], 
       Hue[0.30242401032401106`], 
       Hue[0.31573058597419845`], 
       Hue[0.34598321429529055`], 
       Hue[0.46665622483807834`], 
       Hue[0.4941315837885616], 
       Hue[0.5080215851425653], 
       Hue[0.5078951870350402], 
       Hue[0.49438569793384135`], 
       Hue[0.4689421989493116], 
       Hue[0.9993138773576917], 
       Hue[0.9447431868723521], 
       Hue[0.8052710886002279], 
       Hue[0.4284878192144614], 
       Hue[0.23569013262989266`], 
       Hue[0.09535511335002544], 
       Hue[0.012416981761704471`], 
       Hue[0.00651454548880398], 
       Hue[0.06526624085499105], 
       Hue[0.18120050527621936`], 
       Hue[0.46106800158684524`], 
       Hue[0.5936214730113275], 
       Hue[0.6834927846365019], 
       Hue[0.7281276512286537], 
       Hue[0.7172549809117243], 
       Hue[0.6625353235798045], 
       Hue[0.569815908101122], 
       Hue[0.465206550797552], 
       Hue[0.3553063566534771], 
       Hue[0.2678215126863767], 
       Hue[0.21474561545679055`], 
       Hue[0.19700414489992643`], 
       Hue[0.21651638834479736`], 
       Hue[0.2650220044541558], 
       Hue[0.41514971435146203`], 
       Hue[0.49209478949644664`], 
       Hue[0.5495160324054348], 
       Hue[0.5804264460055597], 
       Hue[0.5847275152911491], 
       Hue[0.5633711959215023], 
       Hue[0.5228549849585805], 
       Hue[0.4108660655097128], 
       Hue[0.35793963983585003`], 
       Hue[0.32196181982177596`], 
       Hue[0.3038847464751781], 
       Hue[0.3054528665727254], 
       Hue[0.32505977403052194`], 
       Hue[0.36059720544575524`], 
       Hue[0.4429128733450321], 
       Hue[0.4786673076179345], 
       Hue[0.5009627581611023], 
       Hue[0.5097251709866026], 
       Hue[0.5041076396414639], 
       Hue[0.4863339347980238], 
       Hue[0.9828710234495321], 
       Hue[0.8832923960888555], 
       Hue[0.3271743382139245], 
       Hue[0.15959566958478616`], 
       Hue[0.044268142314836556`], 
       Hue[0.00019337307025973915`], 
       Hue[0.028418295931356086`], 
       Hue[0.11815984246578093`], 
       Hue[0.5316873042172314], 
       Hue[0.6433864798446933], 
       Hue[0.7129512265211195], 
       Hue[0.7291829753041139], 
       Hue[0.6949797634889439], 
       Hue[0.30779078249909153`], 
       Hue[0.2373810681337084], 
       Hue[0.20066519112153092`], 
       Hue[0.2026478319486967], 
       Hue[0.2374001699812741], 
       Hue[0.45528565552427486`], 
       Hue[0.5238528132189096], 
       Hue[0.5679830181272578], 
       Hue[0.5862903916128747], 
       Hue[0.5768479543343968], 
       Hue[0.5453105669303194], 
       Hue[0.3827440223611579], 
       Hue[0.33788312915460816`], 
       Hue[0.31066213638926676`], 
       Hue[0.3020367671253597], 
       Hue[0.31317197038374744`], 
       Hue[0.3413996776773687], 
       Hue[0.4622085744694986], 
       Hue[0.4914272605184611], 
       Hue[0.5070339797762392], 
       Hue[0.508739936379077], 
       Hue[0.49666447901885713`], 
       Hue[0.4726722422928341], 
       Hue[0.9937902454191361], 
       Hue[0.9165146266166616], 
       Hue[0.06749591946657801], 
       Hue[0.003919030783754052], 
       Hue[0.015609428891030397`], 
       Hue[0.699971216757225], 
       Hue[0.7303632774022073], 
       Hue[0.7073791856954091], 
       Hue[0.25162539534682765`], 
       Hue[0.20640118012583167`], 
       Hue[0.19874410699069098`], 
       Hue[0.22612387557100475`], 
       Hue[0.5595022421681706], 
       Hue[0.584309098885265], 
       Hue[0.5815364892839555], 
       Hue[0.3157471346942727], 
       Hue[0.3022753199773609], 
       Hue[0.30879389782493594`], 
       Hue[0.4854245129748536], 
       Hue[0.5044201628958161], 
       Hue[0.509718783537733], 
       Hue[0.5007335092505529], 
       Hue[0.9667661925555533], 
       Hue[0.02583863830291333], 
       Hue[0.0011818652150552555`], 
       Hue[0.04474657846926766], 
       Hue[0.7223594076174131], 
       Hue[0.7246703827183743], 
       Hue[0.22518744589636994`], 
       Hue[0.19754748163603134`], 
       Hue[0.208634382039461], 
       Hue[0.5749065206349886], 
       Hue[0.5863879817745395], 
       Hue[0.5707371319346564], 
       Hue[0.30673329444513014`], 
       Hue[0.30314306831387317`], 
       Hue[0.31852422625639154`], 
       Hue[0.4966314184512103], 
       Hue[0.5087957746504135], 
       Hue[0.506819786792017], 
       Hue[0.46511104327578334`], 
       Hue[0.9998317258266405], 
       Hue[0.9509681597328024], 
       Hue[0.8153126620244369], 
       Hue[0.4415316609757316], 
       Hue[0.24599819700986064`], 
       Hue[0.10301852170983622`], 
       Hue[0.0152889908141981], 
       Hue[0.0048408833970324805`], 
       Hue[0.05959974864541673], 
       Hue[0.1732497988665789], 
       Hue[0.4518382171586136], 
       Hue[0.5867449839550105], 
       Hue[0.6788391636490541], 
       Hue[0.7270286465258367], 
       Hue[0.7193120632429801], 
       Hue[0.6673512627236854], 
       Hue[0.5759458057962669], 
       Hue[0.4723610253431274], 
       Hue[0.3616442509073246], 
       Hue[0.27216190098388954`], 
       Hue[0.21723526414490893`], 
       Hue[0.19691482891959594`], 
       Hue[0.21439028563027615`], 
       Hue[0.2610331068364633], 
       Hue[0.4099948976947927], 
       Hue[0.4877798709633255], 
       Hue[0.5467918284652941], 
       Hue[0.5791586577276414], 
       Hue[0.5852837377285557], 
       Hue[0.5653111688170056], 
       Hue[0.5260352716422533], 
       Hue[0.41453007897562516`], 
       Hue[0.36070226393656263`], 
       Hue[0.3236878102890886], 
       Hue[0.3045029235071989], 
       Hue[0.3047861626591104], 
       Hue[0.32327080137803543`], 
       Hue[0.3581049084776401], 
       Hue[0.4403567480221323], 
       Hue[0.47686610231215976`], 
       Hue[0.49996837320774584`], 
       Hue[0.5095721492687053], 
       Hue[0.5048369390284297], 
       Hue[0.4878754078513014], 
       Hue[0.9860959897132404], 
       Hue[0.8920405754704226], 
       Hue[0.3394642235638259], 
       Hue[0.16844154127581717`], 
       Hue[0.049630774104489184`], 
       Hue[0.00067968478812791], 
       Hue[0.024878002437049684`], 
       Hue[0.11086629066175724`], 
       Hue[0.5232262185200781], 
       Hue[0.6377049849149692], 
       Hue[0.7100389363460009], 
       Hue[0.7297943271471654], 
       Hue[0.6983074338301829], 
       Hue[0.313385910395041], 
       Hue[0.24075339417151076`], 
       Hue[0.2018535953262627], 
       Hue[0.20147314136468028`], 
       Hue[0.23443202408538538`], 
       Hue[0.450407958045255], 
       Hue[0.5201735956371143], 
       Hue[0.5660070639074255], 
       Hue[0.5859727159172649], 
       Hue[0.5781565865671658], 
       Hue[0.5477997262080732], 
       Hue[0.3861217439374481], 
       Hue[0.3401793538647262], 
       Hue[0.31182583379229883`], 
       Hue[0.30196905649702754`], 
       Hue[0.3119835198823455], 
       Hue[0.33917631126870074`], 
       Hue[0.4599232055568946], 
       Hue[0.4899998645875516], 
       Hue[0.5064602142625718], 
       Hue[0.5090742844857543], 
       Hue[0.4977440839091062], 
       Hue[0.47449542131047157`], 
       Hue[0.9956841411546937], 
       Hue[0.9240577059915343], 
       Hue[0.07403431290013895], 
       Hue[0.005594983556776678], 
       Hue[0.012980615612672552`], 
       Hue[0.6961757916204239], 
       Hue[0.7301270936158388], 
       Hue[0.7100907872114038], 
       Hue[0.2554957763782571], 
       Hue[0.20824379357162065`], 
       Hue[0.19810353521186538`], 
       Hue[0.22356041200275353`], 
       Hue[0.5571444524392815], 
       Hue[0.5835169115041335], 
       Hue[0.5824772874623582], 
       Hue[0.3171961842491085], 
       Hue[0.3025484679119037], 
       Hue[0.30785915480990866`], 
       Hue[0.4838040302677882], 
       Hue[0.5036343868730178], 
       Hue[0.509812541827281], 
       Hue[0.5016441322273737], 
       Hue[0.9712653142864771], 
       Hue[0.029989237985885042`], 
       Hue[0.0004978921949427284], 
       Hue[0.04034635252407731], 
       Hue[0.7203446513454894], 
       Hue[0.7261050370218644], 
       Hue[0.22803899739325412`], 
       Hue[0.19808203255406662`], 
       Hue[0.20694762893907065`], 
       Hue[0.5733238784161767], 
       Hue[0.5865384276352568], 
       Hue[0.572393585479803], 
       Hue[0.30760609999367183`], 
       Hue[0.30274238629082356`], 
       Hue[0.31709858811332675`], 
       Hue[0.49540733478866494`], 
       Hue[0.5084353545597643], 
       Hue[0.5073859931086108], 
       Hue[0.46703846950620614`], 
       Hue[0.998448479886106], 
       Hue[0.009843866155091807], 
       Hue[0.00843063624649587], 
       Hue[0.7290100214584059], 
       Hue[0.715030962226523], 
       Hue[0.212416637447252], 
       Hue[0.19723260179711513`], 
       Hue[0.5815755271304598], 
       Hue[0.5840737672867806], 
       Hue[0.3033530092993661], 
       Hue[0.30618779701623844`], 
       Hue[0.5019054232796265], 
       Hue[0.5098160612835756], 
       Hue[0.9793217325836672], 
       Hue[0.03920568734138302], 
       Hue[1.9431316287676914`*^-6], 
       Hue[0.7156400717745212], 
       Hue[0.7283631856834863], 
       Hue[0.19964057480653322`], 
       Hue[0.20395279152107798`], 
       Hue[0.5698615651448196], 
       Hue[0.5864902343719636], 
       Hue[0.3095707549211819], 
       Hue[0.3021886018508314], 
       Hue[0.5075544538039404], 
       Hue[0.5083467089643028], 
       Hue[0.991558886737508], 
       Hue[0.0025416021976406022`], 
       Hue[0.7303857878923152], 
       Hue[0.20472174257038858`], 
       Hue[0.199520012193598], 
       Hue[0.584982346562472], 
       Hue[0.5805020310888032], 
       Hue[0.3020879253290879], 
       Hue[0.5095641958602498], 
       Hue[0.021995004825586528`], 
       Hue[0.002153912450069295], 
       Hue[0.7241487618328206], 
       Hue[0.7230346961721441], 
       Hue[0.19717547031288632`], 
       Hue[0.5861221085495295], 
       Hue[0.30593374080967534`], 
       Hue[0.3036253405287925], 
       Hue[0.5091028896748487], 
       Hue[0.5061972641252878], 
       Hue[0.46316151351666784`], 
       Hue[0.9999596783728093], 
       Hue[0.9539513856066393], 
       Hue[0.8202605533701683], 
       Hue[0.44807490014134127`], 
       Hue[0.2512123122927336], 
       Hue[0.10695235782006424`], 
       Hue[0.01683695467242885], 
       Hue[0.0040956569670293486`], 
       Hue[0.056851752355151], 
       Hue[0.1693172494948873], 
       Hue[0.44719682180885745`], 
       Hue[0.5832560410452572], 
       Hue[0.6764336754521145], 
       Hue[0.7263977833099855], 
       Hue[0.7202773573073147], 
       Hue[0.6697038811667531], 
       Hue[0.5789867699336907], 
       Hue[0.4759393159769706], 
       Hue[0.3648418163136129], 
       Hue[0.274374419359509], 
       Hue[0.21854005590628103`], 
       Hue[0.19692258570687277`], 
       Hue[0.21336988592730155`], 
       Hue[0.25907312285803985`], 
       Hue[0.40741019161402214`], 
       Hue[0.4855966234689855], 
       Hue[0.5453963720065264], 
       Hue[0.5784803296826425], 
       Hue[0.5855250157817945], 
       Hue[0.5662528084609693], 
       Hue[0.527604533443602], 
       Hue[0.4163716119691961], 
       Hue[0.36210323042306836`], 
       Hue[0.32457619615199695`], 
       Hue[0.30484443586734944`], 
       Hue[0.3044786309587214], 
       Hue[0.32239943626426715`], 
       Hue[0.35687046043821974`], 
       Hue[0.4390685917365928], 
       Hue[0.4759493150001718], 
       Hue[0.4994518915005314], 
       Hue[0.5094722684784718], 
       Hue[0.5051839743865574], 
       Hue[0.4886305819218906], 
       Hue[0.9875857312181044], 
       Hue[0.8963063801407845], 
       Hue[0.3456559736141298], 
       Hue[0.17293967557690268`], 
       Hue[0.052423956625145984`], 
       Hue[0.001033807889657623], 
       Hue[0.02319140923548957], 
       Hue[0.10728775949388453`], 
       Hue[0.5189519319922496], 
       Hue[0.6348041110853369], 
       Hue[0.7084992741165242], 
       Hue[0.730021359558941], 
       Hue[0.6999151398411236], 
       Hue[0.3162232314400494], 
       Hue[0.24248721959758351`], 
       Hue[0.20250922965159196`], 
       Hue[0.2009350811322139], 
       Hue[0.23298453472279038`], 
       Hue[0.44795145855976426`], 
       Hue[0.5183010405805644], 
       Hue[0.5649827808748183], 
       Hue[0.5857695624378338], 
       Hue[0.5787771518138014], 
       Hue[0.5490208871529957], 
       Hue[0.3878271817579736], 
       Hue[0.34135104106317876`], 
       Hue[0.31243469453253747`], 
       Hue[0.3019669042475949], 
       Hue[0.31141246642009546`], 
       Hue[0.3380825446962907], 
       Hue[0.45876574819793875`], 
       Hue[0.4892676321926436], 
       Hue[0.5061533719726508], 
       Hue[0.5092192065164403], 
       Hue[0.4982685606704655], 
       Hue[0.47539587053651394`], 
       Hue[0.9965036533990517], 
       Hue[0.9277099028767435], 
       Hue[0.07741118116908019], 
       Hue[0.006545040376348843], 
       Hue[0.011754173708606208`], 
       Hue[0.694196488317554], 
       Hue[0.7299285695493786], 
       Hue[0.7113866466062204], 
       Hue[0.25747620575624014`], 
       Hue[0.20922615589271132`], 
       Hue[0.19783433757715396`], 
       Hue[0.222318458303834], 
       Hue[0.5559305441341034], 
       Hue[0.5830761906715545], 
       Hue[0.5829122346250385], 
       Hue[0.3179470444961341], 
       Hue[0.3027172833285415], 
       Hue[0.3074163871231355], 
       Hue[0.48297633116309163`], 
       Hue[0.5032217772411482], 
       Hue[0.5098364872624109], 
       Hue[0.5020829041825803], 
       Hue[0.9733979177627001], 
       Hue[0.03217923558692298], 
       Hue[0.00026456330760138425`], 
       Hue[0.03822466776463629], 
       Hue[0.7192528173210839], 
       Hue[0.7267463319398563], 
       Hue[0.22951435426113886`], 
       Hue[0.19841041602321333`], 
       Hue[0.20615128469307425`], 
       Hue[0.5724953306195166], 
       Hue[0.5865701371072155], 
       Hue[0.5731900593456889], 
       Hue[0.30806992185994525`], 
       Hue[0.3025728674258855], 
       Hue[0.31640731134624556`], 
       Hue[0.4947758849798226], 
       Hue[0.5082351400483068], 
       Hue[0.507647758707737], 
       Hue[0.46799339555560476`], 
       Hue[0.9989244877928809], 
       Hue[0.011093043683422343`], 
       Hue[0.0074424303027391114`], 
       Hue[0.7285958864539577], 
       Hue[0.7161637065940748], 
       Hue[0.21356098952413946`], 
       Hue[0.1971010307070317], 
       Hue[0.581015838546441], 
       Hue[0.5844127780128294], 
       Hue[0.3036080765844652], 
       Hue[0.3058118517359242], 
       Hue[0.5014405758283849], 
       Hue[0.5097783671078973], 
       Hue[0.9811366889897579], 
       Hue[0.04169925990903195], 
       Hue[0.00006088139301863027], 
       Hue[0.7143236295594844], 
       Hue[0.7287990350942779], 
       Hue[0.2001324154715796], 
       Hue[0.20328411726795242`], 
       Hue[0.5689345099517922], 
       Hue[0.5864050139098008], 
       Hue[0.310107386280593], 
       Hue[0.30210220205431704`], 
       Hue[0.5073008821769013], 
       Hue[0.5085506469270239], 
       Hue[0.9927165655601837], 
       Hue[0.0031930341472816703`], 
       Hue[0.7304011764169368], 
       Hue[0.20554104099298062`], 
       Hue[0.19911521302179447`], 
       Hue[0.5846605826147834], 
       Hue[0.5810309001555394], 
       Hue[0.30217092213173646`], 
       Hue[0.5096490675647403], 
       Hue[0.023878374998728635`], 
       Hue[0.0016320114417620601`], 
       Hue[0.7232822688767383], 
       Hue[0.7238775354381142], 
       Hue[0.19734119319625487`], 
       Hue[0.5862694255043903], 
       Hue[0.30632435245869793`], 
       Hue[0.30337405249353744`], 
       Hue[0.508955991297499], 
       Hue[0.5065155200951625], 
       Hue[0.4641389414291167], 
       Hue[0.9996163765329349], 
       Hue[0.005647269957591905], 
       Hue[0.7276052550827381], 
       Hue[0.19694204561245557`], 
       Hue[0.5850178703020079], 
       Hue[0.3041830272786626], 
       Hue[0.5096564413487235], 
       Hue[0.00039958828601804885`], 
       Hue[0.7295148039485877], 
       Hue[0.20123891556231463`], 
       Hue[0.586146309812301], 
       Hue[0.30199236410498087`], 
       Hue[0.5089145054050822], 
       Hue[0.9947795565586137], 
       Hue[0.004719661666282848], 
       Hue[0.7302719578404275], 
       Hue[0.1984068355440257], 
       Hue[0.5839278789206208], 
       Hue[0.30240115706591425`], 
       Hue[0.5097732915303294], 
       Hue[0.0008037404983536889], 
       Hue[0.7213801933052155], 
       Hue[0.7254129699400698], 
       Hue[0.19779440674088125`], 
       Hue[0.586477679987138], 
       Hue[0.3029324825203093], 
       Hue[0.5086222312447762], 
       Hue[0.997886138168534], 
       Hue[0.729370126116609], 
       Hue[0.19739875180034563`], 
       Hue[0.30311953252932555`], 
       Hue[0.5098382877175248], 
       Hue[0.000016375850514616097`], 
       Hue[0.727875637862944], 
       Hue[0.19918964806862957`], 
       Hue[0.5865461157226632], 
       Hue[0.30229589595785256`], 
       Hue[0.0019646526238763506`], 
       Hue[0.7303172536818068], 
       Hue[0.5852744124014346], 
       Hue[0.3020262877004737], 
       Hue[0.5094642231909867], 
       Hue[0.0027472897636919846`], 
       Hue[0.19705023484326734`], 
       Hue[0.5859461331185835], 
       Hue[0.5092364802332315], 
       Hue[0.4621789599449495], 
       Hue[0.9999908071892714], 
       Hue[0.9554103470051183], 
       Hue[0.8227158835260597], 
       Hue[0.45135136123523556`], 
       Hue[0.25383408455290213`], 
       Hue[0.10894458002969554`], 
       Hue[0.017638896543744564`], 
       Hue[0.003746061191312877], 
       Hue[0.05549934827118347], 
       Hue[0.16736197420727], 
       Hue[0.44486983368472827`], 
       Hue[0.5814990908819898], 
       Hue[0.6752113880365309], 
       Hue[0.7260619955374727], 
       Hue[0.7207440829476266], 
       Hue[0.6708661266211597], 
       Hue[0.580501033028453], 
       Hue[0.4777284420901881], 
       Hue[0.3664475319960289], 
       Hue[0.2754911436163423], 
       Hue[0.21920738944553142`], 
       Hue[0.19693960613163025`], 
       Hue[0.2128704467396316], 
       Hue[0.25810192523044806`], 
       Hue[0.4061162119169739], 
       Hue[0.4844986982056843], 
       Hue[0.5446903729677138], 
       Hue[0.5781300746249614], 
       Hue[0.5856364029550446], 
       Hue[0.5667164597996925], 
       Hue[0.5283838073180919], 
       Hue[0.4172946233260462], 
       Hue[0.36280854616674507`], 
       Hue[0.3250266968896073], 
       Hue[0.30502329727443234`], 
       Hue[0.3043313599013711], 
       Hue[0.3219696213860011], 
       Hue[0.35625626475914274`], 
       Hue[0.4384220825633182], 
       Hue[0.47548692546551913`], 
       Hue[0.4991888480559029], 
       Hue[0.5094164748377753], 
       Hue[0.5053530523162522], 
       Hue[0.48900420256714605`], 
       Hue[0.9882997273966143], 
       Hue[0.8984117911538605], 
       Hue[0.34876310969892166`], 
       Hue[0.1752072954384195], 
       Hue[0.05384838353979976], 
       Hue[0.001238671411110559], 
       Hue[0.022369173733794878`], 
       Hue[0.10551588784462423`], 
       Hue[0.5168041463736125], 
       Hue[0.6333387922487168], 
       Hue[0.7077086179827072], 
       Hue[0.7301151361492206], 
       Hue[0.7007048138509191], 
       Hue[0.31765164590453226`], 
       Hue[0.24336596763392349`], 
       Hue[0.2028524025374644], 
       Hue[0.20067844545327743`], 
       Hue[0.23227005722180188`], 
       Hue[0.44671897553966744`], 
       Hue[0.5173566428249443], 
       Hue[0.5644616040211143], 
       Hue[0.585656887413563], 
       Hue[0.5790789297644396], 
       Hue[0.549625516558515], 
       Hue[0.3886839245038264], 
       Hue[0.34194271584029734`], 
       Hue[0.31274585759574447`], 
       Hue[0.3019737791377214], 
       Hue[0.31113278814657486`], 
       Hue[0.3375402413554141], 
       Hue[0.4581834047632361], 
       Hue[0.4888969183975654], 
       Hue[0.5059949664893649], 
       Hue[0.5092860758325621], 
       Hue[0.4985269212743564], 
       Hue[0.4758432258268301], 
       Hue[0.9968814026299977], 
       Hue[0.9295057847653789], 
       Hue[0.07912635275973517], 
       Hue[0.0070481045885099625`], 
       Hue[0.011163089418390726`], 
       Hue[0.6931865293047925], 
       Hue[0.7298091515363099], 
       Hue[0.7120194620012161], 
       Hue[0.25847763172539007`], 
       Hue[0.20973257280383545`], 
       Hue[0.1977125670302054], 
       Hue[0.2217075361333815], 
       Hue[0.5553148912322927], 
       Hue[0.5828446723003333], 
       Hue[0.583120789575437], 
       Hue[0.31832902835393095`], 
       Hue[0.30280976386414693`], 
       Hue[0.30720120216787317`], 
       Hue[0.48255816046477434`], 
       Hue[0.5030105546421659], 
       Hue[0.5098427066180773], 
       Hue[0.5022981137633066], 
       Hue[0.9744347524258661], 
       Hue[0.03330282770310494], 
       Hue[0.00017516631115055414`], 
       Hue[0.03718363020476689], 
       Hue[0.7186858046923251], 
       Hue[0.7270478632991085], 
       Hue[0.23026436627187988`], 
       Hue[0.19858990772751975`], 
       Hue[0.20576495973074102`], 
       Hue[0.5720717775928054], 
       Hue[0.5865750764940711], 
       Hue[0.5735802806674762], 
       Hue[0.3083086770694], 
       Hue[0.30249585101320436`], 
       Hue[0.31606712093873934`], 
       Hue[0.49445533659803], 
       Hue[0.5081300302277536], 
       Hue[0.5077732701661544], 
       Hue[0.46846857495517014`], 
       Hue[0.9991300271644434], 
       Hue[0.01174566946728356], 
       Hue[0.006970929547336413], 
       Hue[0.7283685353780949], 
       Hue[0.7167145442308477], 
       Hue[0.21414827460416594`], 
       Hue[0.19704824569516938`], 
       Hue[0.5807248537809969], 
       Hue[0.5845731877159915], 
       Hue[0.3037437105961115], 
       Hue[0.30563023301458875`], 
       Hue[0.5012032858348269], 
       Hue[0.5097537088254951], 
       Hue[0.9820139630997686], 
       Hue[0.04297430342782105], 
       Hue[0.00011792213267192153`], 
       Hue[0.7136444173203238], 
       Hue[0.7289975066952692], 
       Hue[0.20039368539034577`], 
       Hue[0.20296191466691813`], 
       Hue[0.5684618134682031], 
       Hue[0.5863513817137326], 
       Hue[0.31038249886690045`], 
       Hue[0.30206685970867236`], 
       Hue[0.507169096907712], 
       Hue[0.5086471272675339], 
       Hue[0.9932639287485192], 
       Hue[0.003546707232799262], 
       Hue[0.7303888963728427], 
       Hue[0.20596600810270016`], 
       Hue[0.19892543940865415`], 
       Hue[0.584488556873624], 
       Hue[0.5812866132816868], 
       Hue[0.3022204434504919], 
       Hue[0.5096858233424291], 
       Hue[0.024848903926887378`], 
       Hue[0.0013979520339281737`], 
       Hue[0.7228278835695641], 
       Hue[0.7242802250175319], 
       Hue[0.19743926211206747`], 
       Hue[0.5863323049245519], 
       Hue[0.30652653313576866`], 
       Hue[0.30325601643532085`], 
       Hue[0.5088775483342796], 
       Hue[0.5066694078031689], 
       Hue[0.4646256706184077], 
       Hue[0.9997349606408383], 
       Hue[0.005236448407879957], 
       Hue[0.7273237302131541], 
       Hue[0.19692407113940585`], 
       Hue[0.5851538714081065], 
       Hue[0.30434027333131985`], 
       Hue[0.5096162423181595], 
       Hue[0.0005303920020837682], 
       Hue[0.729661115513212], 
       Hue[0.20154113590531675`], 
       Hue[0.586063204964525], 
       Hue[0.30197806954419804`], 
       Hue[0.5089962479394333], 
       Hue[0.9952424615701849], 
       Hue[0.005147983189013328], 
       Hue[0.7302062262196445], 
       Hue[0.19825093064836288`], 
       Hue[0.5837261141399079], 
       Hue[0.3024721262564731], 
       Hue[0.5097948268985687], 
       Hue[0.0006417663275243846], 
       Hue[0.7208694612961528], 
       Hue[0.7257653344395588], 
       Hue[0.19793312833305524`], 
       Hue[0.5865116782225581], 
       Hue[0.3028348676430779], 
       Hue[0.5085304598927095], 
       Hue[0.9981780824848383], 
       Hue[0.7291968228562069], 
       Hue[0.19731136128242172`], 
       Hue[0.30323357300308523`], 
       Hue[0.5098291057280255], 
       Hue[0.], 
       Hue[0.7281258605723994], 
       Hue[0.19940999879545324`], 
       Hue[0.5865218383192659], 
       Hue[0.3022396416620994], 
       Hue[0.0022438227550333756`], 
       Hue[0.7303581547877092], 
       Hue[0.5851320901875532], 
       Hue[0.30205443937769283`], 
       Hue[0.5095160936253827], 
       Hue[0.002441684430235791], 
       Hue[0.1971077968091568], 
       Hue[0.5860376965674697], 
       Hue[0.50917134770177], 
       Hue[0.46267086489575343`], 
       Hue[0.9999066416272024], 
       Hue[0.1969143301513292], 
       Hue[0.5095241589999915], 
       Hue[0.0008474844192292719], 
       Hue[0.7299144159501334], 
       Hue[0.5858748368938598], 
       Hue[0.3019653323453908], 
       Hue[0.7300345459112496], 
       Hue[0.30263018576806844`], 
       Hue[0.5098264305004734], 
       Hue[0.00037214810347613314`], 
       Hue[0.19824112630039387`], 
       Hue[0.5865579174269794], 
       Hue[0.9986972936407681], 
       Hue[0.7288097123312463], 
       Hue[0.19716248711984577`], 
       Hue[0.5097991498627552], 
       Hue[0.000022229199721057746`], 
       Hue[0.5864512955682013], 
       Hue[0.30214278567179], 
       Hue[0.0028580024327217735`], 
       Hue[0.7304001344379754], 
       Hue[0.30212675113105414`], 
       Hue[0.5096085228148353], 
       Hue[0.001884009728560232], 
       Hue[0.19725326577945265`], 
       Hue[0.58619935583749], 
       Hue[0.9994760047573628], 
       Hue[0.1969687408152447], 
       Hue[0.5096927497272287], 
       Hue[0.00028725508583743453`], 
       Hue[0.5862220365567584], 
       Hue[0.302011932574461], 
       Hue[0.7303243031558699], 
       Hue[0.30233555637254844`], 
       Hue[0.5097479416983489], 
       Hue[0.0009837839584546648], 
       Hue[0.19766586043666273`], 
       Hue[0.5864364440341081], 
       Hue[0.7295299414015992], 
       Hue[0.197494759257395], 
       Hue[0.5098436119368327], 
       Hue[0.00005104596531685379], 
       Hue[0.5865630752083039], 
       Hue[0.302357355372642], 
       Hue[0.7302631036806362], 
       Hue[0.30200346449333215`], 
       Hue[0.1970027735536695], 
       Hue[0.46168582378114603`]}], {}}, {{{}, {}, 
     TagBox[
      {GrayLevel[0.5], AbsoluteThickness[1.6], Opacity[1.], 
       LineBox[CompressedData["
1:eJwt13k8VOsfB3BK5SKVtNAmpVLCLZElz1haURJplbSQNuQnS10ULlJaJArZ
KllCpYT6TtnKvs6QbcYyg6wt2i79Ts+3f6r36/N5vs9zzpw582qh3WmLI+NE
REQWMX/8/nvLke5qdo+VPvNPhfM7h4mYkbxTm5wGYRx7deswWX03IuqJnDF1
+IZhYlLOfRwtZ/nbtu6aw8T68NeX1+UO/zYrbMYwaVH71+iynOtviyhUD5HY
GdsCguX8aH/JuiHiVX6rYGcOtcKR1UNkpz9v3KK9/tQ3lYeI1Bdn79yoALpf
4Ywh4l4X5t63IOi3ebXvB8n2G+8dty65Quc5rh4kvuJPlgbJhdH130v7yfKN
1wIfO6HtH/eTGv/TPU3F1LzUiH6yeLxKiqrbTTofDveTotFE1bqacNr/9aOP
SH0KX7MgJJK6ckEfiWjxNMoai6F9uS29xGDu7sRWq7vUO1f0kt49WhPE06ht
HaR6yfw+j0NpK2OppSp6yOljmkoizdQKFtt6iMzh9KR7a+Opqzd3k12749KH
hhPp+RLnC8hgk6VEvPw96v7/ukiAjfiRHUbUsdOausiTQ6fln4Vh/iG8i0if
WufvpXWfzuuW6iKFFxr3TDz/gFruYwdZlTpt4lzxZHoetXg+kfzlu2/j/PTf
ZmttbCRK2we68y89/W2fdfvSibz3Rh37OPS146lkalrsJYnnaCuvh+SH+A7V
7e1o7agEUsV+fqZ1bRb9vN1uhBJPdd+xb13o/SUxUDFFVlaV9Zw+H4NXXkH+
upNHqq3QDiMA2ceLnrkep44NesSGhGL33bnh6Kbpb8DduyVmUz/6S0MBKA7e
Vz50O5u6b0sJnK3QJhGfX9B5+gdqQFo1q+udeA69vszkGki8rB7ycy41q+FL
DVSbLm20WY/52ku1sKJU9oxSOLWIxuM6aCsevP9YK5f2zw1xYOPre9Llnnm0
P6DcBK0KC7PGrqDtHZvA1Sdqr3oC2iu5CeLIjaQbpWhf5Wb4+dLHcM/cl3Re
n2ILpOfsdRO+RLeOa4NZT6e1iooCvZ79OnzYF/LTsnMmNc9sJx/iD3eVFqmg
x5z5oDLjxYtLu6h94pL4YOhme3NGBrVtj0w7aEZZ3w9TY9P+waZ22B1YxvfX
oVYw+9QO51wN5p1dT237VaIDXpuuCNu9F/N/tTvAdHTMd/6/uP7mjQ44aHN/
f1Ir5na6neC3ZU5kZA/mq7Z1wn3Nq3XBn6nZr+06oU/a0+SkxGvalw/qBDcw
016lSc3LqOmEyJQ3rosMqGOdOzsh75ZWhqwpNXvwSyeIOi1c+vUgtY/S7C4I
Ufgim3eZWsR9dxc8knI0T4ugtl16rAuqv7VeiknA/W66d8HM6rfjfF9gnhTe
BXG+UUPru3Des8oueNZuVFap9wb3XyMAzibf4csbqW1LWQIYefRqpqkFtUKX
iQC0vLQPvrXHfM9BAWRPVxthX0dvCxJAg8eJOd7ROC/tugC+tT1krUvCvPyO
ANamLr704iXm29IE8MJYXuFxNzX7QLkA3idbr3f6hP3iOgH8mHrTUXWMmjfQ
JACdlilZydPzaX6xRwB7jMzeO8zPx3xQAJ4Pg38tUaYWmTcigJz/TdiSoI/O
ExXC+ybD0wc3U8eunCSEHwY+YQsscb2tlBB0pX+23jlGzZo8Uwj7XNeK7XHF
9QHyQjj3/n/Ks72xD/OFkHd/6ExYGLWC1xIhNEupRlrcRf9UFsJ/LsdfTU3G
865bKYS5jUkdFU9xvYG6ENYRgfhloPYRXy0Em3uLVE1KcP21NUL4R/Lgjr/q
cf9mLSHEOMe4F7dRs3u0hfCK2xTt34vnfaErhNZ1cvlGX3A/03VCGEvY2S0q
UkDnxekLYb5E2GS2BPoFEYK+U/Wqf2ZQ+9xgMftzpHfpKaDVDZj99UzP/1hO
zQ5lHBMfFJ+9htr2CWMQLy52Y1HzIhjzTon1a5hQxxowFqk3kPlkhXkqM19B
11sr0xbXNzP7s+Ly9p0+juepZM5nO+mH70o3XO/HnN/npNaDDz7YH2WuL7bW
tezhJcy1dYTA1n48bB/+x2uZ/e8OzlwSh+cfZe6fyMSVep0puL8fc38VTjge
jH+GrmTuv0HNgwDb17i+lfl87NZ2pcwvw/0ylwvhQoxidTMH+xuXCuGNY/Sc
3X3UIm8WCOFJz/HjNiO438AcISQ66OQeEimk96trlhD8j3L3nJKlZulMEYJb
173kM/OpFW5JCOHoYdcf7suobWGCEDbZTbt9UQ/zsz8FoM1v6wncgPPEmOd5
ue0j7SvmmNsOCUDKxqQx4jA1z6tTAJW7/Wc/CkFvLREAu2GHw5Nw7BvnCyDD
WjE7OxbzCXkCuG4F1vlPcf6nVAHs3P49vKGZ2ud0iAA2VhULWgTYr7rIfH+3
hWt2DKFFvAQgZ7aa0y9WRO/fWwcBNG86OWP8Smrb8YYCKC/WPSKuha7XEsCr
DRJZkw2oeW4rBXDX+IHlbKuiP+83Adix+DdWnsdc40MXdGtZyewqR68J7ILG
Z4vs9nNx3qhnF5Ss+Zhpx6dWCDvZBSmrQ7ef/FKEv18WXXBK7d3VC/OK6Xpt
uS74smTdlLST1LZeMZ2g325YHOxOHfs5pBMCojd5O1zEXMurE2bKWg4uisT1
8tadoCl6vPJ2AbXCQalOcG+KCA2c85aef8bJDmCHx2w8uoTa1mhXB4hbJP4y
+puavc6oAyLfpp/+tYFa4c7sDsjJKtrm5kLN+8Zuh/9CP085/A5zN/F2MDb5
UWxQh/MuDfEhZKKIz4I27Ds38GHeecmh95+pYzMf8EHfUbFqu8I7ul7EmA/e
xuZXyVlqlrwrD8Z9T5k6R6mE3p89Di0wp9zwE1GjZt36uwU04hrrD2tT+1z7
0QxHNk+688gM+3CpGd5G2ikZumFfOqUJQnXkdI4Vo7+1NMLccwGHnh8rpX2W
HAc0f9k+2/GojJ63WrYMyvw0KoqWV9L5UxUSic6U0nHX1qBtre6TpMiDWntZ
6LdBSeTioyuxg1borMFUotPQ7TLbl5rtwn1MklZEz3Lkojd45hLDngsZEw2r
8P0nX0Q8VCtKjm9EB0cVkYwzcl1VptQ8q/nFZP5Yutwda7S3wlvyXablgtpJ
7E9aUEIy9LSsdkWgj4+vIAuufvj+cIDaxy29hrw66P3w8Sdq9seOGmKzevru
3G/oZbNrSRRHJ7tsXDXtP/euJbPnBbsNzqzG3zuTOiKTvOyTBqFm7a+rJ5le
efHrjDGXF+MQczNziw2bcf2l1RwSOnQ203oHtYjbNQ6R0io+7WmP+bnNXDKh
4EgfhGIufNhAEm9+v/M2DPMzdQ3E2P6ySXUk5mljDeSCRFZyewLuP8uikYyZ
ix2bkI396s+N5FtLfNcWHvZDlZvIrXTNmzu6ML+6tYlo+pYY7+vFXPNME/nf
4o8JJz+jj+c2kY+OBnZXxWvo9Vzc2Ew+fG1rrVenFlHZ2kKe2Ye+2aJJzRo+
3UJ8uPr3QRf7G661kJnPo08+3EDtE1vTQgzd9v53bh/mU8xbyWSBBG/4IM4z
P9VKGqxy8o/aYz4/pJWcWiN3ydwF19sXtZLbnzlyiwOxH7emjRw5HDAacfnP
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
3Z/JnQ==
        "]]},
      Annotation[#, "Charting`Private`Tag$96609#1"]& ]}, {}}, 
   LineBox[{{0.5, -1}, {0.5, 1}}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-0.7304003209557905, 1.0000000002055411`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8501357867671328`*^9, 3.8501357918331223`*^9}, {
  3.850135878242828*^9, 3.850135902239378*^9}},
 CellLabel->
  "Out[139]=",ExpressionUUID->"135723d6-2dc6-4b9f-a5ec-dcf266d8cc0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PacletInstall", "[", 
  "\"\<https://github.com/ssmit1986/DualNumbers/releases/download/1.2/\
DualNumbers-1.2.paclet\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8503763799481077`*^9, 3.8503763799487753`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7a4207db-fefc-4450-b892-c7748734fce8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PacletObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DualNumbers\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.2\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DualNumbers\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.2\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"/home/s/.WolframDesktop/Paclets/Repository/DualNumbers-1.\
2\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Missing", "[", "\"NotAvailable\"", "]"}], Short], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PacletObject[<|
   "Name" -> "DualNumbers", "Version" -> "1.2", "MathematicaVersion" -> 
    "12.1+", "Creator" -> "Sjoerd Smit", 
    "Extensions" -> {{
      "Kernel", "Root" -> "Kernel", "Context" -> "DualNumbers`"}}, "Location" -> 
    "/home/s/.WolframDesktop/Paclets/Repository/DualNumbers-1.2"|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.850376384638646*^9, 3.850376484274605*^9, {3.850376575353836*^9, 
   3.850376604751223*^9}},
 CellLabel->"Out[10]=",ExpressionUUID->"9032a534-0b6a-4d96-91bd-671be0372969"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"<<", "DualNumbers`"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8503764015773478`*^9, 3.850376447645656*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"4481a187-9b04-408b-9504-9a1437717a8a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", " ", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.850401570493306*^9, 3.85040158685783*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"5f26b7d7-d4d5-4bfe-94d3-3356a4a3f8bb"],

Cell[BoxData["\<\"/home/s/Documents/wis22\"\>"], "Output",
 CellChangeTimes->{{3.850401581999838*^9, 3.850401587744656*^9}},
 CellLabel->"Out[94]=",ExpressionUUID->"12a1412d-3920-4242-8f62-632aad2b4934"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.850376731319295*^9, 3.8503767332395077`*^9}, {
  3.850401383511307*^9, 3.85040138747976*^9}},
 CellLabel->"",ExpressionUUID->"3e84dc3d-f34c-424c-bce8-dbe76b41664b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", " ", 
  RowBox[{"\"\<net.wlnet\>\"", ",", 
   RowBox[{"trainedfirstnet", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8504014423213654`*^9, 3.85040149002886*^9}, {
  3.8504015579323387`*^9, 3.8504015672459927`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"b6f4af4d-94f1-4c2f-944a-08f781e44f72"],

Cell[BoxData["\<\"net.wlnet\"\>"], "Output",
 CellChangeTimes->{{3.850401464270522*^9, 3.850401492955558*^9}, 
   3.8504015899496717`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"f7229a7f-cee4-4420-b3d6-cc77dd6409a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net1", " ", "=", " ", 
  RowBox[{"Import", "[", "\"\<net.wlnet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.850401715617607*^9, 3.850401735754298*^9}, 
   3.8504017712835503`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"2f4dac31-9c8f-4b48-9960-bb1785a108c2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "3"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "3"}, 
                   NeuralNetworks`Private`NetChain`selected = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Tanh, 
                    "Net" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Input"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TagBox[
                    RowBox[{"FunctionLayer", "[", "Tanh", "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "1", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[NeuralNetworks`Private`NetChain`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {173., {63.2921875, 68.3078125}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.850401739929738*^9, 3.8504020410046387`*^9, 
  3.850468278622716*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"dae273ec-6865-4512-91d1-81870f3e610e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"gradient", "[", "x_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"net1", "[", 
      RowBox[{"x", "+", 
       RowBox[{"10", "^", 
        RowBox[{"-", "8"}]}]}], "]"}], "-", " ", 
     RowBox[{"net1", "[", "x", "]"}]}], " ", ")"}], "/", " ", 
   RowBox[{"10", "^", 
    RowBox[{"-", "8"}]}]}]}]], "Input",
 CellChangeTimes->{{3.850403313781211*^9, 3.85040341874332*^9}, {
   3.850403599278754*^9, 3.850403711886601*^9}, 3.850403744531825*^9, {
   3.8504038132755613`*^9, 3.850403821892996*^9}, {3.8504039699985523`*^9, 
   3.850403970152369*^9}, {3.850468281203249*^9, 3.850468285599221*^9}, {
   3.8504701844639587`*^9, 3.85047018682913*^9}, {3.850471546169776*^9, 
   3.850471548274949*^9}, {3.850506557540634*^9, 3.850506561357244*^9}, {
   3.850507801382778*^9, 3.85050780953846*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"44695f48-cd25-4f39-b3a3-82af13da6d5f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ploss", "[", 
   RowBox[{"inputs_", ",", " ", "labels_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"SquaredEuclideanDistance", "[", 
    RowBox[{"inputs", ",", " ", "labels"}], "]"}], "+", " ", 
   RowBox[{"gradient", "[", "inputs", "]"}], "+", 
   RowBox[{"gradient", "[", 
    RowBox[{"gradient", "[", "inputs", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8505080090331583`*^9, 3.850508069205983*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"eed323a7-a90f-4b10-851b-0a5a984139ca"],

Cell[BoxData[
 TemplateBox[{
  "SetDelayed", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Function\\\"}]\\) in \\!\\(\\*RowBox[{RowBox[{\
\\\"(\\\", RowBox[{RowBox[{\\\"gradient\\\", \\\"[\\\", \
RowBox[{\\\"#input\\\", \\\",\\\", FractionBox[\\\"1\\\", \
SuperscriptBox[\\\"10\\\", \\\"9\\\"]]}], \\\"]\\\"}], \\\"&\\\"}], \
\\\")\\\"}], \\\"[\\\", RowBox[{\\\"inputs_\\\", \\\",\\\", \
\\\"labels_\\\"}], \\\"]\\\"}]\\) is Protected.\"", 2, 145, 54, 
   17493570699736358823, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.850508070013618*^9},
 CellLabel->
  "During evaluation of \
In[145]:=",ExpressionUUID->"bc496865-2d6d-4594-9c00-48f48412263d"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.850508070021871*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"85129339-ff22-4763-9792-d1754df2f398"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", " ", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10", ",", " ", 
      RowBox[{"FunctionLayer", "[", "Tanh", "]"}], ",", " ", "10", ",", " ", 
      RowBox[{"FunctionLayer", "[", "Tanh", "]"}], ",", " ", "1", ",", " ", 
      "ploss"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", "->", 
      RowBox[{"2", "->", 
       RowBox[{"3", "->", 
        RowBox[{"4", "->", "5"}]}]}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.850470162322071*^9, 3.850470205666808*^9}, 
   3.8504713545606413`*^9, {3.850505564795892*^9, 3.850505594275272*^9}, {
   3.850505637690662*^9, 3.85050584062213*^9}, {3.850506044965542*^9, 
   3.850506092740095*^9}, {3.850507817348287*^9, 3.850507943792363*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"d47ae986-95fd-4d9c-ae01-ec4c06446ab2"],

Cell[BoxData[
 TemplateBox[{
  "NetGraph", "netinvnodes", 
   "\"\\!\\(\\*RowBox[{RowBox[{\\\"gradient\\\", \\\"[\\\", \
RowBox[{\\\"#input\\\", \\\",\\\", FractionBox[\\\"1\\\", \
SuperscriptBox[\\\"10\\\", \\\"9\\\"]]}], \\\"]\\\"}], \\\"&\\\"}]\\) is not \
a layer, a net, or a valid specification for one.\"", 2, 144, 53, 
   17493570699736358823, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.850507944195216*^9},
 CellLabel->
  "During evaluation of \
In[144]:=",ExpressionUUID->"d2d49094-3901-424a-9c2c-f303a9d23c5d"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.850505569486094*^9, 3.8505055949334087`*^9}, {
  3.850505638586348*^9, 3.850505643005682*^9}, {3.850505747250746*^9, 
  3.850505841054515*^9}, {3.8505060286869907`*^9, 3.850506093222225*^9}, {
  3.850507833642918*^9, 3.850507848994293*^9}, {3.850507911237681*^9, 
  3.850507944201329*^9}},
 CellLabel->
  "Out[144]=",ExpressionUUID->"8e10f497-8e22-4034-807d-94dba24d6892"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"gradient", "[", 
      RowBox[{
       RowBox[{"gradient", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "1", ",", "0.05"}], "]"}], ",", 
         RowBox[{"10", "^", 
          RowBox[{"-", "7"}]}], ",", " ", "net1"}], "]"}], ",", " ", 
       RowBox[{"10", "^", 
        RowBox[{"-", "7"}]}], ",", " ", "net1"}], "]"}], ",", " ", 
     RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ListLinePlot", "@", 
    RowBox[{"gradient", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "1", ",", "0.05"}], "]"}], ",", 
      RowBox[{"10", "^", 
       RowBox[{"-", "7"}]}], ",", " ", "net1"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}], "\n", 
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQAmIQDQEf7EHkBaHD+6ECDlC+PYTLAeVfhsoLwPhQeRE0
vgQaXwbMb7n+HMpXQJNXQpNXAfPLNjyA8tXAfO7s21C+BhpfC6r/OpSvAzX/
MZSvB+ZbzHkD5RugqTdEs8/IgQEFGIP59yxvQeVNwPzUs3ehfFM0/mh4otpH
fngCAAUTaZY=
     "], {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         19, 20, 21},
        VertexColors->Automatic]}},
     VertexColors->CompressedData["
1:eJxTTMoPSmViYGDQAmJmIA535Cl5y33B/uvXmrNFN8/Y+z/dsvzJnBf2QTrb
t0gJXbdPupHo8+v3E3tZu5cuTSuf2H/02GMzV/uevdn6V2vEbuy2f/y/b0XA
3Qf2d3az1b7MfWDv6CFm0Bj93D7kabWbkskdksVt+Zp/aj95Y8//Npl1P+9d
+8+P9XVfTT5BsvoESye2Tzkv7V98Vf+4U/i5/RtvM7mcjRfstXt0WSxPPLW/
f/eU0Nyjz+2Lb9Qe/yBxBaf4bbOepgeFj+2/er7b0Hnmub2ejb6o9Odr9vXN
3149Xvja/l1s874vZU/tL8zcsnKX+zn7V2dsVWryX9svmql+XeTEAfvjKYX/
J748gNMcXO70PbB+ogrHRfs1/zgON6jet3d6p+QTuO6lfZqUr94xhqf2zxh1
Pr0+/tx+088dZiE8V+3P8Ein/nV7bn/H46ZS5vTn9slz9nO2dlzCKT4a7yMz
3gFjTwYj
      "]], {{}, {}}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7EEkd/Zte6iAAxA3aEy/D+VzgPgM9yxvQfkC
YL5W6VUoXwTMvyD0GMqXQOPLgPkt16/vh/AVwHyLOXeg8kpQ+edQvgpU/2Eo
X82BAQVooPG1oOovQ9XrQPmfoXw9mH1Q+w3Q1Bui2WcE5pdt+ADlG6PJm6DZ
bwrnAwCdRy5e
       "]]}}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 21}, {-0.2980232238769531, 0.8940696716308594}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}], "\n", 
 RowBox[{"gradient", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "1", ",", "0.1"}], "]"}], ",", 
   RowBox[{"10", "^", 
    RowBox[{"-", "9"}]}]}], "]"}], "\n", 
 RowBox[{"{", 
  RowBox[{"2.0041607300267078`*^7", ",", 
   RowBox[{"-", "2.500867841127062`*^7"}], ",", 
   RowBox[{"-", "6.819188587998927`*^7"}], ",", 
   RowBox[{"-", "1.0771303613143414`*^8"}], ",", 
   RowBox[{"-", "1.424170284039163`*^8"}], ",", 
   RowBox[{"-", "1.7181862873538506`*^8"}], ",", 
   RowBox[{"-", "1.959740070529045`*^8"}], ",", 
   RowBox[{"-", "2.1530021705555093`*^8"}], ",", 
   RowBox[{"-", "2.3040693975296098`*^8"}], ",", 
   RowBox[{"-", "2.4196828877570903`*^8"}], ",", 
   RowBox[{"-", "2.5063845490187314`*^8"}]}], "}"}], "\n", 
 RowBox[{"x", " ", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", " ", "1", ",", " ", "0.1"}], "]"}]}], "\n", 
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.1`", ",", "0.2`", ",", "0.30000000000000004`", ",", "0.4`", 
   ",", "0.5`", ",", "0.6000000000000001`", ",", "0.7000000000000001`", ",", 
   "0.8`", ",", "0.9`", ",", "1.`"}], "}"}], "\n", 
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"NonStandard", "[", 
     RowBox[{"f", "[", 
      RowBox[{"Dual", "[", 
       RowBox[{
        RowBox[{"Range", "[", "10", "]"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{"1", ",", "10"}], "]"}]}], "]"}], "]"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"Standard", "[", 
     RowBox[{"f", "[", 
      RowBox[{"Dual", "[", 
       RowBox[{
        RowBox[{"Range", "[", "10", "]"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{"1", ",", "10"}], "]"}]}], "]"}], "]"}], "]"}], "]"}]}], 
  "]"}], "\n", 
 GraphicsBox[{{{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.922526, 0.385626, 0.209179], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.528488, 0.470624, 0.701351], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.772079, 0.431554, 0.102387], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.363898, 0.618501, 0.782349], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[1, 0.75, 0], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.647624, 0.37816, 0.614037], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.571589, 0.586483, 0.], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {10., -1.}}]}, 
     {RGBColor[0.915, 0.3325, 0.2125], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.}, {2., -1.}, {3., -1.}, {4., -1.}, {5., -1.}, {
       6., -1.}, {7., -1.}, {8., -1.}, {9., -1.}, {
       10., -1.}}]}}, {{}, {}}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -1.0200416073203087`}, {2., -2.0200416073203087`}, {
       3., -3.0200416073203087`}, {4., -4.020041607320309}, {
       5., -5.020041607320309}, {6., -6.020041607320309}, {
       7., -7.020041607320309}, {8., -8.020041607320309}, {
       9., -9.020041607320309}, {10., -10.020041607320309`}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.9749913215637207}, {2., -1.9749913215637207`}, {
       3., -2.9749913215637207`}, {4., -3.9749913215637207`}, {
       5., -4.974991321563721}, {6., -5.974991321563721}, {
       7., -6.974991321563721}, {8., -7.974991321563721}, {
       9., -8.97499132156372}, {10., -9.97499132156372}}]}, 
     {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.9318081140518188}, {2., -1.9318081140518188`}, {
       3., -2.931808114051819}, {4., -3.931808114051819}, {
       5., -4.931808114051819}, {6., -5.931808114051819}, {
       7., -6.931808114051819}, {8., -7.931808114051819}, {
       9., -8.931808114051819}, {10., -9.931808114051819}}]}, 
     {RGBColor[0.922526, 0.385626, 0.209179], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.8922869637608528}, {2., -1.8922869637608528`}, {
       3., -2.892286963760853}, {4., -3.892286963760853}, {
       5., -4.892286963760853}, {6., -5.892286963760853}, {
       7., -6.892286963760853}, {8., -7.892286963760853}, {
       9., -8.892286963760853}, {10., -9.892286963760853}}]}, 
     {RGBColor[0.528488, 0.470624, 0.701351], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.8575829714536667}, {2., -1.8575829714536667`}, {
       3., -2.8575829714536667`}, {4., -3.8575829714536667`}, {
       5., -4.857582971453667}, {6., -5.857582971453667}, {
       7., -6.857582971453667}, {8., -7.857582971453667}, {
       9., -8.857582971453667}, {10., -9.857582971453667}}]}, 
     {RGBColor[0.772079, 0.431554, 0.102387], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.8281813710927963}, {2., -1.8281813710927963`}, {
       3., -2.8281813710927963`}, {4., -3.8281813710927963`}, {
       5., -4.828181371092796}, {6., -5.828181371092796}, {
       7., -6.828181371092796}, {8., -7.828181371092796}, {
       9., -8.828181371092796}, {10., -9.828181371092796}}]}, 
     {RGBColor[0.363898, 0.618501, 0.782349], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.8040259927511215}, {2., -1.8040259927511215`}, {
       3., -2.8040259927511215`}, {4., -3.8040259927511215`}, {
       5., -4.8040259927511215`}, {6., -5.8040259927511215`}, {
       7., -6.8040259927511215`}, {8., -7.8040259927511215`}, {
       9., -8.804025992751122}, {10., -9.804025992751122}}]}, 
     {RGBColor[1, 0.75, 0], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.7846997827291489}, {2., -1.7846997827291489`}, {
       3., -2.784699782729149}, {4., -3.784699782729149}, {
       5., -4.784699782729149}, {6., -5.784699782729149}, {
       7., -6.784699782729149}, {8., -7.784699782729149}, {
       9., -8.784699782729149}, {10., -9.784699782729149}}]}, 
     {RGBColor[0.647624, 0.37816, 0.614037], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.7695930600166321}, {2., -1.769593060016632}, {
       3., -2.769593060016632}, {4., -3.769593060016632}, {
       5., -4.769593060016632}, {6., -5.769593060016632}, {
       7., -6.769593060016632}, {8., -7.769593060016632}, {
       9., -8.769593060016632}, {10., -9.769593060016632}}]}, 
     {RGBColor[0.571589, 0.586483, 0.], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.7580317109823227}, {2., -1.7580317109823227`}, {
       3., -2.7580317109823227`}, {4., -3.7580317109823227`}, {
       5., -4.758031710982323}, {6., -5.758031710982323}, {
       7., -6.758031710982323}, {8., -7.758031710982323}, {
       9., -8.758031710982323}, {10., -9.758031710982323}}]}, 
     {RGBColor[0.915, 0.3325, 0.2125], PointSize[
       NCache[
        Rational[1, 72], 0.013888888888888888`]], AbsoluteThickness[1.6], 
      LineBox[{{1., -0.7493615448474884}, {2., -1.7493615448474884`}, {
       3., -2.7493615448474884`}, {4., -3.7493615448474884`}, {
       5., -4.749361544847488}, {6., -5.749361544847488}, {
       7., -6.749361544847488}, {8., -7.749361544847488}, {
       9., -8.749361544847488}, {10., -9.749361544847488}}]}}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {-2., 0}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}], "\n", 
 RowBox[{"f", "@", 
  RowBox[{"Dual", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{"1", ",", "10"}], "]"}]}], "]"}]}], "\n", 
 RowBox[{"Dual", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1"}], "}"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "a_", "]"}], ":=", " ", 
   RowBox[{"a", "^", "2"}]}], " "}], "\n", 
 RowBox[{"ListLinePlot", "@", 
  RowBox[{"NonStandard", "@", 
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"Dual", "[", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"1", ",", "10"}], "]"}], ",", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", " ", "10"}], "]"}]}], "]"}], ","}], " ", 
    "]"}]}]}], "\n", 
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 2.}, {2., 4.}, {3., 6.}, {4., 8.}, {5., 10.}, {6., 12.}, {
      7., 14.}, {8., 16.}, {9., 18.}, {10., 20.}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10}, {0, 20.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"x", "^", "2"}], " ", "*", " ", 
    RowBox[{"y", "^", "3"}]}]}], ";"}], "\n", 
 RowBox[{"d", "=", 
  RowBox[{
   RowBox[{"NonStandard", "@", 
    RowBox[{"g", "[", 
     RowBox[{
      RowBox[{"Dual", "[", 
       RowBox[{"a", ",", "1"}], "]"}], ",", 
      RowBox[{"Dual", "[", 
       RowBox[{"b", ",", "1"}], "]"}]}], "]"}]}], "//", 
   "Simplify"}]}], "\n", 
 RowBox[{"a", " ", 
  SuperscriptBox["b", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"3", " ", "a"}], "+", 
    RowBox[{"2", " ", "b"}]}], ")"}]}], "\n", 
 RowBox[{
  RowBox[{"Total", "@", 
   RowBox[{"Grad", "[", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", " ", "b"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "]"}]}], " "}], "\n", 
 RowBox[{
  RowBox[{"3", " ", 
   SuperscriptBox["a", "2"], " ", 
   SuperscriptBox["b", "2"]}], "+", 
  RowBox[{"2", " ", "a", " ", 
   SuperscriptBox["b", "3"]}]}]}], "Input",
 CellChangeTimes->{{3.850470209128948*^9, 3.8504704549239683`*^9}, {
   3.850471287157535*^9, 3.8504713209152603`*^9}, {3.850471356333425*^9, 
   3.850471442548285*^9}, {3.850471556113535*^9, 3.8504715622671328`*^9}, {
   3.850471612436488*^9, 3.8504716756065617`*^9}, {3.850471715233893*^9, 
   3.850471719743701*^9}, {3.850471783289989*^9, 3.850471850852242*^9}, {
   3.850471893008197*^9, 3.850471985467792*^9}, {3.850472023204348*^9, 
   3.85047205110139*^9}, 3.8505079699422913`*^9},
 FontSize->12,ExpressionUUID->"3f403207-5258-4c1d-8b85-3cb6b0b591ec"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.850505998322397*^9, 
  3.850506000781672*^9}},ExpressionUUID->"ab32a3c7-d352-44e3-adc0-\
0f72a4464da7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.85047013024692*^9, 
  3.8504701500809183`*^9}},ExpressionUUID->"bbc3ff98-3416-4b0e-81de-\
eaa6064060af"]
},
WindowSize->{1188., 631.5},
WindowMargins->{{105.75, Automatic}, {69.75, Automatic}},
FrontEndVersion->"13.0 for Linux x86 (64-bit) (December 6, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c87867db-df89-4703-b15f-ae53378e2f7a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[561, 20, 1732, 47, 237, "Input",ExpressionUUID->"07b8faac-2071-46ce-bf7a-cd2244d7255d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2318, 71, 453, 10, 29, "Input",ExpressionUUID->"74a1432d-7cb6-4fd0-8fb0-e39d41f83398"],
Cell[2774, 83, 21331, 368, 229, "Output",ExpressionUUID->"977f1133-cc01-4169-b8cc-6ae87a5e1c27"]
}, Open  ]],
Cell[24120, 454, 152, 3, 29, "Input",ExpressionUUID->"3a0f4b7d-2ee4-4454-8abb-63429e15fa22"],
Cell[24275, 459, 1435, 29, 236, "Input",ExpressionUUID->"986378fb-6a80-4850-baa9-0a6018269f10"],
Cell[CellGroupData[{
Cell[25735, 492, 1129, 30, 71, "Input",ExpressionUUID->"43cf647b-a1fd-4bd2-924a-2411bb34308d"],
Cell[26867, 524, 1150, 24, 55, "Output",ExpressionUUID->"1685bd06-297f-40c9-a695-7a38a439e45b"]
}, Open  ]],
Cell[28032, 551, 487, 13, 29, "Input",ExpressionUUID->"f322e0ef-6bb0-43d8-bf0a-8bbed5f812fc"],
Cell[CellGroupData[{
Cell[28544, 568, 732, 18, 51, "Input",ExpressionUUID->"2555aa67-20aa-43c5-b9d5-d946813644f0"],
Cell[29279, 588, 1029, 18, 55, "Output",ExpressionUUID->"24483ecc-d2cc-4725-972c-dfc92efecf55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30345, 611, 700, 16, 133, "Input",ExpressionUUID->"88df451c-aac3-4f4a-9c07-ef39c73cc241"],
Cell[31048, 629, 21396, 370, 229, "Output",ExpressionUUID->"ebc5f943-f04a-45e6-8af4-54559b47987c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52481, 1004, 500, 10, 71, "Input",ExpressionUUID->"3ed34430-8bc1-45e6-b510-5abca87390a2"],
Cell[52984, 1016, 27992, 562, 65, "Output",ExpressionUUID->"cf066737-8c25-4c76-a145-ae5eab8e8729"]
}, Open  ]],
Cell[80991, 1581, 179, 3, 29, "Input",ExpressionUUID->"0bb4ee62-27bc-4917-b0e5-7b8acd42e844"],
Cell[CellGroupData[{
Cell[81195, 1588, 1640, 27, 71, "Input",ExpressionUUID->"b85354af-8491-41a5-872f-a4c66153cbf2"],
Cell[82838, 1617, 42365, 884, 423, "Output",ExpressionUUID->"5d3bade9-706a-4615-9c50-3e76bc5c8271"]
}, Open  ]],
Cell[125218, 2504, 150, 2, 29, "Input",ExpressionUUID->"6a0a7e6c-d5c9-4bfa-908b-6e95f4794468"],
Cell[CellGroupData[{
Cell[125393, 2510, 1500, 36, 113, "Input",ExpressionUUID->"28889f72-4225-48ba-8bf3-c3823dff4e45"],
Cell[126896, 2548, 64366, 1499, 229, "Output",ExpressionUUID->"135723d6-2dc6-4b9f-a5ec-dcf266d8cc0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191299, 4052, 312, 5, 29, "Input",ExpressionUUID->"7a4207db-fefc-4450-b892-c7748734fce8"],
Cell[191614, 4059, 22328, 394, 63, "Output",ExpressionUUID->"9032a534-0b6a-4d96-91bd-671be0372969"]
}, Open  ]],
Cell[213957, 4456, 229, 4, 45, "Input",ExpressionUUID->"4481a187-9b04-408b-9504-9a1437717a8a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[214211, 4464, 253, 4, 29, "Input",ExpressionUUID->"5f26b7d7-d4d5-4bfe-94d3-3356a4a3f8bb"],
Cell[214467, 4470, 203, 2, 33, "Output",ExpressionUUID->"12a1412d-3920-4242-8f62-632aad2b4934"]
}, Open  ]],
Cell[214685, 4475, 213, 3, 29, "Input",ExpressionUUID->"3e84dc3d-f34c-424c-bce8-dbe76b41664b"],
Cell[CellGroupData[{
Cell[214923, 4482, 370, 7, 29, "Input",ExpressionUUID->"b6f4af4d-94f1-4c2f-944a-08f781e44f72"],
Cell[215296, 4491, 217, 3, 33, "Output",ExpressionUUID->"f7229a7f-cee4-4420-b3d6-cc77dd6409a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215550, 4499, 283, 5, 29, "Input",ExpressionUUID->"2f4dac31-9c8f-4b48-9960-bb1785a108c2"],
Cell[215836, 4506, 29872, 593, 172, "Output",ExpressionUUID->"dae273ec-6865-4512-91d1-81870f3e610e"]
}, Open  ]],
Cell[245723, 5102, 937, 21, 29, "Input",ExpressionUUID->"44695f48-cd25-4f39-b3a3-82af13da6d5f"],
Cell[CellGroupData[{
Cell[246685, 5127, 528, 12, 71, "Input",ExpressionUUID->"eed323a7-a90f-4b10-851b-0a5a984139ca"],
Cell[247216, 5141, 672, 14, 40, "Message",ExpressionUUID->"bc496865-2d6d-4594-9c00-48f48412263d"],
Cell[247891, 5157, 159, 3, 33, "Output",ExpressionUUID->"85129339-ff22-4763-9792-d1754df2f398"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248087, 5165, 851, 19, 71, "Input",ExpressionUUID->"d47ae986-95fd-4d9c-ae01-ec4c06446ab2"],
Cell[248941, 5186, 550, 12, 40, "Message",ExpressionUUID->"d2d49094-3901-424a-9c2c-f303a9d23c5d"],
Cell[249494, 5200, 429, 7, 33, "Output",ExpressionUUID->"8e10f497-8e22-4034-807d-94dba24d6892"]
}, Open  ]],
Cell[249938, 5210, 18222, 419, 725, "Input",ExpressionUUID->"3f403207-5258-4c1d-8b85-3cb6b0b591ec"],
Cell[268163, 5631, 152, 3, 29, "Input",ExpressionUUID->"ab32a3c7-d352-44e3-adc0-0f72a4464da7"],
Cell[268318, 5636, 153, 3, 29, "Input",ExpressionUUID->"bbc3ff98-3416-4b0e-81de-eaa6064060af"]
}
]
*)

